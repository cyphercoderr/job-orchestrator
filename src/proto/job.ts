// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v5.29.3
// source: job.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "job";

export interface SubmitJobRequest {
  jobId: string;
  orgId: string;
  appVersionId: string;
  testPath: string;
  target: string;
  priority: number;
}

export interface SubmitJobResponse {
  jobId: string;
  status: string;
  message: string;
}

export interface GetJobStatusRequest {
  jobId: string;
}

export interface GetJobStatusResponse {
  jobId: string;
  orgId: string;
  appVersionId: string;
  testPath: string;
  target: string;
  status: string;
  createdAt: string;
  updatedAt: string;
  logs: string[];
}

export interface GetJobsByGroupRequest {
  appVersionId: string;
  limit: number;
  offset: number;
}

export interface GetJobsByGroupResponse {
  jobs: GetJobStatusResponse[];
  total: number;
}

export interface UpdateJobStatusRequest {
  jobId: string;
  status: string;
  logs: string[];
}

export interface UpdateJobStatusResponse {
  success: boolean;
  message: string;
}

function createBaseSubmitJobRequest(): SubmitJobRequest {
  return { jobId: "", orgId: "", appVersionId: "", testPath: "", target: "", priority: 0 };
}

export const SubmitJobRequest: MessageFns<SubmitJobRequest> = {
  encode(message: SubmitJobRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.jobId !== "") {
      writer.uint32(10).string(message.jobId);
    }
    if (message.orgId !== "") {
      writer.uint32(18).string(message.orgId);
    }
    if (message.appVersionId !== "") {
      writer.uint32(26).string(message.appVersionId);
    }
    if (message.testPath !== "") {
      writer.uint32(34).string(message.testPath);
    }
    if (message.target !== "") {
      writer.uint32(42).string(message.target);
    }
    if (message.priority !== 0) {
      writer.uint32(48).int32(message.priority);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SubmitJobRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSubmitJobRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.jobId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.orgId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.appVersionId = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.testPath = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.target = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.priority = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SubmitJobRequest {
    return {
      jobId: isSet(object.jobId) ? globalThis.String(object.jobId) : "",
      orgId: isSet(object.orgId) ? globalThis.String(object.orgId) : "",
      appVersionId: isSet(object.appVersionId) ? globalThis.String(object.appVersionId) : "",
      testPath: isSet(object.testPath) ? globalThis.String(object.testPath) : "",
      target: isSet(object.target) ? globalThis.String(object.target) : "",
      priority: isSet(object.priority) ? globalThis.Number(object.priority) : 0,
    };
  },

  toJSON(message: SubmitJobRequest): unknown {
    const obj: any = {};
    if (message.jobId !== "") {
      obj.jobId = message.jobId;
    }
    if (message.orgId !== "") {
      obj.orgId = message.orgId;
    }
    if (message.appVersionId !== "") {
      obj.appVersionId = message.appVersionId;
    }
    if (message.testPath !== "") {
      obj.testPath = message.testPath;
    }
    if (message.target !== "") {
      obj.target = message.target;
    }
    if (message.priority !== 0) {
      obj.priority = Math.round(message.priority);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SubmitJobRequest>, I>>(base?: I): SubmitJobRequest {
    return SubmitJobRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SubmitJobRequest>, I>>(object: I): SubmitJobRequest {
    const message = createBaseSubmitJobRequest();
    message.jobId = object.jobId ?? "";
    message.orgId = object.orgId ?? "";
    message.appVersionId = object.appVersionId ?? "";
    message.testPath = object.testPath ?? "";
    message.target = object.target ?? "";
    message.priority = object.priority ?? 0;
    return message;
  },
};

function createBaseSubmitJobResponse(): SubmitJobResponse {
  return { jobId: "", status: "", message: "" };
}

export const SubmitJobResponse: MessageFns<SubmitJobResponse> = {
  encode(message: SubmitJobResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.jobId !== "") {
      writer.uint32(10).string(message.jobId);
    }
    if (message.status !== "") {
      writer.uint32(18).string(message.status);
    }
    if (message.message !== "") {
      writer.uint32(26).string(message.message);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SubmitJobResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSubmitJobResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.jobId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.status = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.message = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SubmitJobResponse {
    return {
      jobId: isSet(object.jobId) ? globalThis.String(object.jobId) : "",
      status: isSet(object.status) ? globalThis.String(object.status) : "",
      message: isSet(object.message) ? globalThis.String(object.message) : "",
    };
  },

  toJSON(message: SubmitJobResponse): unknown {
    const obj: any = {};
    if (message.jobId !== "") {
      obj.jobId = message.jobId;
    }
    if (message.status !== "") {
      obj.status = message.status;
    }
    if (message.message !== "") {
      obj.message = message.message;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SubmitJobResponse>, I>>(base?: I): SubmitJobResponse {
    return SubmitJobResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SubmitJobResponse>, I>>(object: I): SubmitJobResponse {
    const message = createBaseSubmitJobResponse();
    message.jobId = object.jobId ?? "";
    message.status = object.status ?? "";
    message.message = object.message ?? "";
    return message;
  },
};

function createBaseGetJobStatusRequest(): GetJobStatusRequest {
  return { jobId: "" };
}

export const GetJobStatusRequest: MessageFns<GetJobStatusRequest> = {
  encode(message: GetJobStatusRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.jobId !== "") {
      writer.uint32(10).string(message.jobId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetJobStatusRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetJobStatusRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.jobId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetJobStatusRequest {
    return { jobId: isSet(object.jobId) ? globalThis.String(object.jobId) : "" };
  },

  toJSON(message: GetJobStatusRequest): unknown {
    const obj: any = {};
    if (message.jobId !== "") {
      obj.jobId = message.jobId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetJobStatusRequest>, I>>(base?: I): GetJobStatusRequest {
    return GetJobStatusRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetJobStatusRequest>, I>>(object: I): GetJobStatusRequest {
    const message = createBaseGetJobStatusRequest();
    message.jobId = object.jobId ?? "";
    return message;
  },
};

function createBaseGetJobStatusResponse(): GetJobStatusResponse {
  return {
    jobId: "",
    orgId: "",
    appVersionId: "",
    testPath: "",
    target: "",
    status: "",
    createdAt: "",
    updatedAt: "",
    logs: [],
  };
}

export const GetJobStatusResponse: MessageFns<GetJobStatusResponse> = {
  encode(message: GetJobStatusResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.jobId !== "") {
      writer.uint32(10).string(message.jobId);
    }
    if (message.orgId !== "") {
      writer.uint32(18).string(message.orgId);
    }
    if (message.appVersionId !== "") {
      writer.uint32(26).string(message.appVersionId);
    }
    if (message.testPath !== "") {
      writer.uint32(34).string(message.testPath);
    }
    if (message.target !== "") {
      writer.uint32(42).string(message.target);
    }
    if (message.status !== "") {
      writer.uint32(50).string(message.status);
    }
    if (message.createdAt !== "") {
      writer.uint32(58).string(message.createdAt);
    }
    if (message.updatedAt !== "") {
      writer.uint32(66).string(message.updatedAt);
    }
    for (const v of message.logs) {
      writer.uint32(74).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetJobStatusResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetJobStatusResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.jobId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.orgId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.appVersionId = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.testPath = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.target = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.status = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.createdAt = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.updatedAt = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.logs.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetJobStatusResponse {
    return {
      jobId: isSet(object.jobId) ? globalThis.String(object.jobId) : "",
      orgId: isSet(object.orgId) ? globalThis.String(object.orgId) : "",
      appVersionId: isSet(object.appVersionId) ? globalThis.String(object.appVersionId) : "",
      testPath: isSet(object.testPath) ? globalThis.String(object.testPath) : "",
      target: isSet(object.target) ? globalThis.String(object.target) : "",
      status: isSet(object.status) ? globalThis.String(object.status) : "",
      createdAt: isSet(object.createdAt) ? globalThis.String(object.createdAt) : "",
      updatedAt: isSet(object.updatedAt) ? globalThis.String(object.updatedAt) : "",
      logs: globalThis.Array.isArray(object?.logs) ? object.logs.map((e: any) => globalThis.String(e)) : [],
    };
  },

  toJSON(message: GetJobStatusResponse): unknown {
    const obj: any = {};
    if (message.jobId !== "") {
      obj.jobId = message.jobId;
    }
    if (message.orgId !== "") {
      obj.orgId = message.orgId;
    }
    if (message.appVersionId !== "") {
      obj.appVersionId = message.appVersionId;
    }
    if (message.testPath !== "") {
      obj.testPath = message.testPath;
    }
    if (message.target !== "") {
      obj.target = message.target;
    }
    if (message.status !== "") {
      obj.status = message.status;
    }
    if (message.createdAt !== "") {
      obj.createdAt = message.createdAt;
    }
    if (message.updatedAt !== "") {
      obj.updatedAt = message.updatedAt;
    }
    if (message.logs?.length) {
      obj.logs = message.logs;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetJobStatusResponse>, I>>(base?: I): GetJobStatusResponse {
    return GetJobStatusResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetJobStatusResponse>, I>>(object: I): GetJobStatusResponse {
    const message = createBaseGetJobStatusResponse();
    message.jobId = object.jobId ?? "";
    message.orgId = object.orgId ?? "";
    message.appVersionId = object.appVersionId ?? "";
    message.testPath = object.testPath ?? "";
    message.target = object.target ?? "";
    message.status = object.status ?? "";
    message.createdAt = object.createdAt ?? "";
    message.updatedAt = object.updatedAt ?? "";
    message.logs = object.logs?.map((e) => e) || [];
    return message;
  },
};

function createBaseGetJobsByGroupRequest(): GetJobsByGroupRequest {
  return { appVersionId: "", limit: 0, offset: 0 };
}

export const GetJobsByGroupRequest: MessageFns<GetJobsByGroupRequest> = {
  encode(message: GetJobsByGroupRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.appVersionId !== "") {
      writer.uint32(10).string(message.appVersionId);
    }
    if (message.limit !== 0) {
      writer.uint32(16).int32(message.limit);
    }
    if (message.offset !== 0) {
      writer.uint32(24).int32(message.offset);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetJobsByGroupRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetJobsByGroupRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.appVersionId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.limit = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.offset = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetJobsByGroupRequest {
    return {
      appVersionId: isSet(object.appVersionId) ? globalThis.String(object.appVersionId) : "",
      limit: isSet(object.limit) ? globalThis.Number(object.limit) : 0,
      offset: isSet(object.offset) ? globalThis.Number(object.offset) : 0,
    };
  },

  toJSON(message: GetJobsByGroupRequest): unknown {
    const obj: any = {};
    if (message.appVersionId !== "") {
      obj.appVersionId = message.appVersionId;
    }
    if (message.limit !== 0) {
      obj.limit = Math.round(message.limit);
    }
    if (message.offset !== 0) {
      obj.offset = Math.round(message.offset);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetJobsByGroupRequest>, I>>(base?: I): GetJobsByGroupRequest {
    return GetJobsByGroupRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetJobsByGroupRequest>, I>>(object: I): GetJobsByGroupRequest {
    const message = createBaseGetJobsByGroupRequest();
    message.appVersionId = object.appVersionId ?? "";
    message.limit = object.limit ?? 0;
    message.offset = object.offset ?? 0;
    return message;
  },
};

function createBaseGetJobsByGroupResponse(): GetJobsByGroupResponse {
  return { jobs: [], total: 0 };
}

export const GetJobsByGroupResponse: MessageFns<GetJobsByGroupResponse> = {
  encode(message: GetJobsByGroupResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.jobs) {
      GetJobStatusResponse.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.total !== 0) {
      writer.uint32(16).int32(message.total);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetJobsByGroupResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetJobsByGroupResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.jobs.push(GetJobStatusResponse.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.total = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetJobsByGroupResponse {
    return {
      jobs: globalThis.Array.isArray(object?.jobs) ? object.jobs.map((e: any) => GetJobStatusResponse.fromJSON(e)) : [],
      total: isSet(object.total) ? globalThis.Number(object.total) : 0,
    };
  },

  toJSON(message: GetJobsByGroupResponse): unknown {
    const obj: any = {};
    if (message.jobs?.length) {
      obj.jobs = message.jobs.map((e) => GetJobStatusResponse.toJSON(e));
    }
    if (message.total !== 0) {
      obj.total = Math.round(message.total);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetJobsByGroupResponse>, I>>(base?: I): GetJobsByGroupResponse {
    return GetJobsByGroupResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetJobsByGroupResponse>, I>>(object: I): GetJobsByGroupResponse {
    const message = createBaseGetJobsByGroupResponse();
    message.jobs = object.jobs?.map((e) => GetJobStatusResponse.fromPartial(e)) || [];
    message.total = object.total ?? 0;
    return message;
  },
};

function createBaseUpdateJobStatusRequest(): UpdateJobStatusRequest {
  return { jobId: "", status: "", logs: [] };
}

export const UpdateJobStatusRequest: MessageFns<UpdateJobStatusRequest> = {
  encode(message: UpdateJobStatusRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.jobId !== "") {
      writer.uint32(10).string(message.jobId);
    }
    if (message.status !== "") {
      writer.uint32(18).string(message.status);
    }
    for (const v of message.logs) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateJobStatusRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateJobStatusRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.jobId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.status = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.logs.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateJobStatusRequest {
    return {
      jobId: isSet(object.jobId) ? globalThis.String(object.jobId) : "",
      status: isSet(object.status) ? globalThis.String(object.status) : "",
      logs: globalThis.Array.isArray(object?.logs) ? object.logs.map((e: any) => globalThis.String(e)) : [],
    };
  },

  toJSON(message: UpdateJobStatusRequest): unknown {
    const obj: any = {};
    if (message.jobId !== "") {
      obj.jobId = message.jobId;
    }
    if (message.status !== "") {
      obj.status = message.status;
    }
    if (message.logs?.length) {
      obj.logs = message.logs;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateJobStatusRequest>, I>>(base?: I): UpdateJobStatusRequest {
    return UpdateJobStatusRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateJobStatusRequest>, I>>(object: I): UpdateJobStatusRequest {
    const message = createBaseUpdateJobStatusRequest();
    message.jobId = object.jobId ?? "";
    message.status = object.status ?? "";
    message.logs = object.logs?.map((e) => e) || [];
    return message;
  },
};

function createBaseUpdateJobStatusResponse(): UpdateJobStatusResponse {
  return { success: false, message: "" };
}

export const UpdateJobStatusResponse: MessageFns<UpdateJobStatusResponse> = {
  encode(message: UpdateJobStatusResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.message !== "") {
      writer.uint32(18).string(message.message);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateJobStatusResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateJobStatusResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.message = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateJobStatusResponse {
    return {
      success: isSet(object.success) ? globalThis.Boolean(object.success) : false,
      message: isSet(object.message) ? globalThis.String(object.message) : "",
    };
  },

  toJSON(message: UpdateJobStatusResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.message !== "") {
      obj.message = message.message;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateJobStatusResponse>, I>>(base?: I): UpdateJobStatusResponse {
    return UpdateJobStatusResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateJobStatusResponse>, I>>(object: I): UpdateJobStatusResponse {
    const message = createBaseUpdateJobStatusResponse();
    message.success = object.success ?? false;
    message.message = object.message ?? "";
    return message;
  },
};

export interface JobSchedulerService {
  SubmitJob(request: SubmitJobRequest): Promise<SubmitJobResponse>;
  GetJobStatus(request: GetJobStatusRequest): Promise<GetJobStatusResponse>;
  GetJobsByGroup(request: GetJobsByGroupRequest): Promise<GetJobsByGroupResponse>;
  UpdateJobStatus(request: UpdateJobStatusRequest): Promise<UpdateJobStatusResponse>;
}

export const JobSchedulerServiceServiceName = "job.JobSchedulerService";
export class JobSchedulerServiceClientImpl implements JobSchedulerService {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || JobSchedulerServiceServiceName;
    this.rpc = rpc;
    this.SubmitJob = this.SubmitJob.bind(this);
    this.GetJobStatus = this.GetJobStatus.bind(this);
    this.GetJobsByGroup = this.GetJobsByGroup.bind(this);
    this.UpdateJobStatus = this.UpdateJobStatus.bind(this);
  }
  SubmitJob(request: SubmitJobRequest): Promise<SubmitJobResponse> {
    const data = SubmitJobRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "SubmitJob", data);
    return promise.then((data) => SubmitJobResponse.decode(new BinaryReader(data)));
  }

  GetJobStatus(request: GetJobStatusRequest): Promise<GetJobStatusResponse> {
    const data = GetJobStatusRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetJobStatus", data);
    return promise.then((data) => GetJobStatusResponse.decode(new BinaryReader(data)));
  }

  GetJobsByGroup(request: GetJobsByGroupRequest): Promise<GetJobsByGroupResponse> {
    const data = GetJobsByGroupRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetJobsByGroup", data);
    return promise.then((data) => GetJobsByGroupResponse.decode(new BinaryReader(data)));
  }

  UpdateJobStatus(request: UpdateJobStatusRequest): Promise<UpdateJobStatusResponse> {
    const data = UpdateJobStatusRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpdateJobStatus", data);
    return promise.then((data) => UpdateJobStatusResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
